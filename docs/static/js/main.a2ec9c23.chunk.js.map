{"version":3,"sources":["components/Gantt/Gantt.js","components/Gantt/index.js","components/Toolbar/Toolbar.js","components/Toolbar/index.js","components/MessageArea/MessageArea.js","components/MessageArea/index.js","App.js","serviceWorker.js","index.js"],"names":["Gantt","props","dataProcessor","initZoom","gantt","ext","zoom","init","levels","name","scale_height","min_column_width","scales","unit","step","format","value","setLevel","onDataUpdated","this","createDataProcessor","type","action","item","id","Promise","resolve","reject","nextProps","config","xml_date","tasks","ganttContainer","initGanttDataProcessor","parse","destructor","setZoom","ref","input","style","width","height","Component","Toolbar","handleZoomChange","e","onZoomChange","target","zoomRadios","map","isActive","key","className","checked","onChange","MessageArea","messages","message","Math","random","defaultProps","data","text","start_date","duration","progress","links","source","App","state","currentZoom","logDataUpdate","addMessage","setState","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2ec9c23.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { gantt } from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\n\nexport default class Gantt extends Component {\n\n  constructor(props) {\n    super(props);\n    this.initZoom();\n  }\n\n  // instance of gantt.dataProcessor\n  dataProcessor = null;\n\n  initZoom() {\n    gantt.ext.zoom.init({\n      levels: [\n        {\n          name: 'Hours',\n          scale_height: 60,\n          min_column_width: 30,\n          scales: [\n            { unit: 'day', step: 1, format: '%d %M' },\n            { unit: 'hour', step: 1, format: '%H' }\n          ]\n        },\n        {\n          name: 'Days',\n          scale_height: 60,\n          min_column_width: 70,\n          scales: [\n            { unit: 'week', step: 1, format: 'Week #%W' },\n            { unit: 'day', step: 1, format: '%d %M' }\n          ]\n        },\n        {\n          name: 'Months',\n          scale_height: 60,\n          min_column_width: 70,\n          scales: [\n            { unit: \"month\", step: 1, format: '%F' },\n            { unit: 'week', step: 1, format: '#%W' }\n          ]\n        }\n      ]\n    });\n  }\n\n  setZoom(value) {\n    gantt.ext.zoom.setLevel(value);\n  }\n\n  initGanttDataProcessor() {\n    /**\n     * type: \"task\"|\"link\"\n     * action: \"create\"|\"update\"|\"delete\"\n     * item: data object object\n     */\n    const onDataUpdated = this.props.onDataUpdated;\n    this.dataProcessor = gantt.createDataProcessor((type, action, item, id) => {\n      return new Promise((resolve, reject) => {\n        if (onDataUpdated) {\n          onDataUpdated(type, action, item, id);\n        }\n\n        // if onDataUpdated changes returns a permanent id of the created item, you can return it from here so dhtmlxGantt could apply it\n        // resolve({id: databaseId});\n        return resolve();\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.zoom !== nextProps.zoom;\n  }\n\n  componentDidMount() {\n    gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\n    const { tasks } = this.props;\n    gantt.init(this.ganttContainer);\n    this.initGanttDataProcessor();\n    gantt.parse(tasks);\n  }\n\n  componentWillUnmount() {\n    if (this.dataProcessor) {\n      this.dataProcessor.destructor();\n      this.dataProcessor = null;\n    }\n  }\n\n  render() {\n    const { zoom } = this.props;\n    this.setZoom(zoom);\n    return (\n      <div\n        ref={(input) => { this.ganttContainer = input }}\n        style={{ width: '100%', height: '100%' }}\n      ></div>\n    );\n  }\n}\n","import Gantt from './Gantt';\nimport './Gantt.css';\nexport default Gantt;","import React, { Component } from 'react';\nexport default class Toolbar extends Component {\n  handleZoomChange = (e) => {\n    if (this.props.onZoomChange) {\n      this.props.onZoomChange(e.target.value)\n    }\n  }\n  render() {\n    const zoomRadios = ['Hours', 'Days', 'Months'].map((value) => {\n      const isActive = this.props.zoom === value;\n      return (\n        <label key={ value } className={ `radio-label ${isActive ? 'radio-label-active': ''}` }>\n          <input type='radio'\n            checked={ isActive }\n            onChange={ this.handleZoomChange }\n            value={ value }/>\n          { value }\n        </label>\n      );\n    });\n\n    return (\n      <div className=\"tool-bar\">\n        <b>Zoom: </b>\n          { zoomRadios }\n      </div>\n    );\n  }\n}\n","import Toolbar from './Toolbar';\nimport './Toolbar.css';\nexport default Toolbar;","import React, { Component } from 'react';\n\nclass MessageArea extends Component {\n  render() {\n    const messages = this.props.messages.map(({ message }) => {\n      return <li key={ Math.random() }>{message}</li>\n    });\n\n    return (\n      <div className=\"message-area\">\n        <h3>Messages:</h3>\n        <ul>\n          {messages}\n        </ul>\n      </div>\n    );\n  }\n}\n\nMessageArea.defaultProps = {\n  messages: []\n};\n\nexport default MessageArea;\n","import MessageArea from './MessageArea';\nimport './MessageArea.css';\nexport default MessageArea;","import React, { Component } from 'react';\nimport Gantt from './components/Gantt';\nimport Toolbar from './components/Toolbar';\nimport MessageArea from './components/MessageArea';\nimport './App.css';\n\nconst data = {\n  data: [\n    { id: 1, text: 'Task #1', start_date: '2020-02-12', duration: 3, progress: 0.6 },\n    { id: 2, text: 'Task #2', start_date: '2020-02-16', duration: 3, progress: 0.4 }\n  ],\n  links: [\n    { id: 1, source: 1, target: 2, type: '0' }\n  ]\n};\nclass App extends Component {\n  state = {\n    currentZoom: 'Days',\n    messages: []\n  };\n\n  addMessage(message) {\n    const maxLogLength = 5;\n    const newMessate = { message };\n    const messages = [\n      newMessate,\n      ...this.state.messages\n    ];\n\n    if (messages.length > maxLogLength) {\n      messages.length = maxLogLength;\n    }\n    this.setState({ messages });\n  }\n\n  logDataUpdate = (type, action, item, id) => {\n    let text = item && item.text ? ` (${item.text})` : '';\n    let message = `${type} ${action}: ${id} ${text}`;\n    if (type === 'link' && action !== 'delete') {\n      message += ` ( source: ${item.source}, target: ${item.target} )`;\n    }\n    this.addMessage(message);\n  }\n\n  handleZoomChange = (zoom) => {\n    this.setState({\n      currentZoom: zoom\n    });\n  }\n\n  render() {\n    const { currentZoom, messages } = this.state;\n    return (\n      <div>\n        <div className=\"zoom-bar\">\n          <Toolbar\n            zoom={currentZoom}\n            onZoomChange={this.handleZoomChange}\n          />\n        </div>\n        <div className=\"gantt-container\">\n          <Gantt\n            tasks={data}\n            zoom={currentZoom}\n            onDataUpdated={this.logDataUpdate}\n          />\n        </div>\n        <MessageArea\n          messages={messages}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}